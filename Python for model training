import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import cv2
import os
from sklearn.model_selection import train_test_split

# Load your dataset
def load_data(data_dir):
    images = []
    labels = []
    for label in os.listdir(data_dir):
        label_dir = os.path.join(data_dir, label)
        if os.path.isdir(label_dir):
            for img_file in os.listdir(label_dir):
                img_path = os.path.join(label_dir, img_file)
                img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Read image as grayscale
                img = cv2.resize(img, (48, 48))  # Resize to 48x48
                images.append(img)
                labels.append(int(label))  # Assuming label is an integer
    return np.array(images), np.array(labels)

# Preprocess data
def preprocess_data(images):
    images = images.astype('float32') / 255.0  # Normalize pixel values
    images = np.expand_dims(images, axis=-1)  # Add channel dimension
    return images

# Load and preprocess the dataset
data_dir = 'path/to/your/dataset'  # Replace with your dataset path
x, y = load_data(data_dir)
x = preprocess_data(x)

# Split the dataset into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Create a CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(7, activation='softmax')  # Assuming 7 classes for different expressions
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

# Save the model
model.save('stress_detection_model.h5')

print("Model training complete and saved as 'stress_detection_model.h5'")
